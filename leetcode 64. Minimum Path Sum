// class Solution {
// public:


     //recursion is edxcedding time limit
    // int recursion(vector<vector<int>>& grid,int i,int j){
    //     //base vase
    //     //1 reach destination
    //     if(i==0&&j==0){
    //         return grid[0][0];
    //     }
    //     //2 out of bound
    //     if(i<0||j<0){
    //         return 1e9;//we are returning maximum value because in qustion we need minimum
    //     }

    //     int up=grid[i][j]+ recursion(grid,i-1, j);
    //     int left=grid[i][j]+recursion(grid,i, j-1);

    //     return min(up,left);
    // }


    ///meoization
//     int memoization(vector<vector<int>>& grid,vector<vector<int>> &dp,int i,int j){
//         //1 reach destination
//         if(i==0&&j==0){
//             return grid[0][0];
//         }
//         //2 out of bound
//         if(i<0||j<0){
//             return 1e9;//we are returning maximum value because in qustion we need minimum
//         }

//         if(dp[i][j]!=-1){
//             return dp[i][j];
//         }
//             int up=grid[i][j]+ memoization(grid,dp,i-1, j);
//             int left=grid[i][j]+memoization(grid,dp,i, j-1);

//         dp[i][j]=min(up,left);
//         return dp[i][j];

//     }
//     int minPathSum(vector<vector<int>>& grid) {

//         int n=grid.size();
//         int m=grid[0].size();
//         vector<vector<int>>dp(n,vector<int>(m,-1));
//         // int a=recursion(grid,n-1,m-1);
//         int a= memoization(grid,dp, n-1, m-1);
//         return a;
//     }
// };



class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        // Create a table to store the minimum path sum values
        vector<vector<int>> dp(n, vector<int>(m, 0));

        // Base case: Fill in the values for the first row and first column
        dp[0][0] = grid[0][0];
        for (int i = 1; i < n; ++i) {
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }
        for (int j = 1; j < m; ++j) {
            dp[0][j] = grid[0][j] + dp[0][j - 1];
        }

        // Build up the table iteratively
        for (int i = 1; i < n; ++i) {
            for (int j = 1; j < m; ++j) {
                // Calculate the minimum path sum for the current cell
                dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        // The bottom-right cell contains the minimum path sum
        return dp[n - 1][m - 1];
    }
};
