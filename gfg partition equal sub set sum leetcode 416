class Solution {
public:

    bool memoize(vector<int>& arr, int sum, int index, vector<vector<int>>& dp) {
        // Base cases:
        if (sum == 0) {
            return true;
        }
        if (index == 0) {
            return arr[0] == sum;
        }

        // Check if the result for the current state is already memoized
        if (dp[index][sum] != -1) {
            return dp[index][sum];
        }

        // Case 1: Not taking the current element in the subset
        bool not_take = memoize(arr, sum, index - 1, dp);

        // Case 2: Taking the current element in the subset
        bool take = false;
        // We can only take the current element if it is less than or equal to the remaining sum.
        if (sum >= arr[index]) {
            // Recursively check for the subset without the current element and with the reduced sum.
            take = memoize(arr, sum - arr[index], index - 1, dp);
        }

        // Memoize the result before returning
        return dp[index][sum] = take || not_take;
    }

    int equalPartition(int N, int arr[]) {
        // code here
        int array_sum = 0;
        for (int i = 0; i < N; i++) {
            array_sum = arr[i] + array_sum;
        }
        // sum of two odd or even numbers can never be odd
        if (array_sum % 2 == 1) {
            return -1; // Corrected: return -1 instead of 0
        }
        int target = array_sum / 2;

        vector<vector<int>> dp(N, vector<int>(target + 1, -1));

        return memoize(arr, target, N - 1, dp);
    }
};
