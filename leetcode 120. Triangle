class Solution {
public:
    // int recursion(vector<vector<int>>& triangle, int i, int j) {
    //     // base case
    //     int n = triangle.size();
    //     if (i == n - 1) {
    //         return triangle[n - 1][j];
    //     }
    //     int down = triangle[i][j] + recursion(triangle, i + 1, j);
    //     int diagonal = triangle[i][j] + recursion(triangle, i + 1, j + 1);
    //     return min(down, diagonal);
    // }

    int memoization(vector<vector<int>>& triangle,int i,int j,vector<vector<int>> &dp){
        int n = triangle.size();
        if (i == n - 1) {
            return triangle[n - 1][j];
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int down = triangle[i][j] + memoization(triangle, i + 1, j,dp);
        int diagonal = triangle[i][j] + memoization(triangle, i + 1, j + 1,dp);

        dp[i][j]= min(down,diagonal);

        return dp[i][j];

    }



    int minimumTotal(vector<vector<int>>& triangle) {
        int n= triangle.size();
        // int m= triangle[0].size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        // int a = recursion(triangle, 0, 0);
        
       int a = memoization(triangle, 0, 0,dp);
        return a;
    }
};
